# Name of file: contran.py
# Author:       Hannah Leitheiser
# Date:         2017AUG17
# Description of software: preprocess code from the Contran programming language.  Contran (conditionals translator) is an impracticaly simple programming language created for the purpose of an exercise in writing a compiler.  For the specification, see contran_specification.txt.
# Requirements:
#  python3
#  a contran source file to compile
#  gcc, and linux, probably (doubt it will work in DOS without changing the operating system call)
# Invokation example:
#  python -i mycode.ct

import os
import re

# -------- command line parse arguments ---------------

import argparse
parser = argparse.ArgumentParser(description="Contran compiler.", prog='python contran.py')
parser.add_argument('-i', help='input contran sourcefile filename', required=True)
parser.add_argument('-o',help='executable output filename', default='output')
parser.add_argument('-k',help='retain intermediate .c code',action='store_true')

args = parser.parse_args()
outputFilename = args.o
code = open(args.i)
retainCCode=False;
if args.k:
    retainCCode=True;
if code == '':
    print('Could not open source file.')
    exit()
cOutput = open(outputFilename+'.c', 'w')

print("CONTRAN V1.0 compiler")

line = code.readline()
lineNumber=0
inFunction=False
variableList=[]
functionList=[]
inMain=False
endOfFunction='   printf("Runtime Error: Condition Not Accounted For.\\nProgram may produce unexpected results.\\n\\n");\n   return 0;\n   }\n'

cOutput.write('/* C Output File automatically generated by CONTRAN Pre-procesor\n'+
'using sourcefile ' + args.i + '.\n' +
'CONTRAN Version 1.0 */\n')

cOutput.write('#include <stdio.h>\n')

while (line):
    lineNumber = lineNumber + 1

    # ----------- conditional line -------------------
    if line[0] == ' ':
        if re.findall('[^0-9^ ]',line[1:-1]) :
            print('Invalid character in conditional, only numbers and spaces allowed.\n'+str(lineNumber)+':'+line)
            exit()
        splitLine = re.findall('[0-9]+', line[1:-1])
        if len(splitLine) != 3 :
            print('Wrong number of numbers.  Line should be in form " <arg1> <arg2> <return value>.\n'+str(lineNumber)+':'+line)
            exit()
        cOutput.write('   if(arg1 == ' + splitLine[0] + ' && arg2 == ' + splitLine[1] + ') return ' + splitLine[2] + ';\n')
    
    # ------------- variable assignment line ---------
    if line[0] == '$':
        if inFunction:
            cOutput.write(endOfFunction)
            inFunction = False
        # we only do assigments in main
        if not inMain:
            cOutput.write('int main() {\n')
            inMain = True;
        # find variables
        variables = re.findall('\$[A-Za-z_][A-Za-z0-9_]*', line)
        print(variables)
        if len(variables) != 3:
            print('Incorrect number of variables.\n'+str(lineNumber)+': '+line)
            exit()
        for x in range(3):
            # get rid of the dollar signs
            variables[x] = variables[x][1:]
        # define variables if new
        for variable in variables:
            if not variable in variableList:
                cOutput.write('char '+variable+'=0;\n')
                variableList.append(variable)
        function=re.search('=[ ]*[A-Za-z_][A-Za-z0-9_]*',line)[0]
        function=re.search('[A-Za-z_][A-Za-z0-9_]+',function)[0]
        if function == '':
            print('Syntax Error.\n' + str(lineNumber) + ': ' + line)
            exit()
        if not function in functionList:
            print('Function ' + function + ' requires definition.\n' + str(lineNumber) + ': ' + line)
            exit()
        cOutput.write(variables[0]+'='+function+'('+variables[1]+','+variables[2]+');\n')
    
    # -------------- function declaration -------------
    if line[0].isalpha():

        if inFunction:
            cOutput.write(endOfFunction)
            inFunction = False
            inFunction = False
        
        functionName = re.search('[A-Za-z_][A-Za-z0-9_]*', line)[0]
        if functionName in functionList:
            print('Redefinition of ' + functionName + ' function not allowed in\n' + str(lineNumber) + ': ' + line)
            exit()
        functionList.append(functionName)
        cOutput.write('char '+functionName+'(char arg1, char arg2) {\n')
        inFunction = True

    # ---------- print function ---------------------
    if line[0] == '?':
        if inFunction:
            cOutput.write('   printf("Error: Condition Not Accounted For.\\n");\n   return 0;\n   }\n')
            inFunction = False
        if not inMain:
            cOutput.write('int main() {\n')
            inMain = True;
        # find variables
        if line[2] == '$':
            variable = line[3:-2]
            
            if not variable in variableList:
                cOutput.write('char '+variable+'=0;\n')
                variableList.append(variable)
            cOutput.write('printf("%c", ' + line[3:-1] + ');\n')
        if line[2] == '"':
            cOutput.write('printf("' + line[3:-2] + '");\n')
    # -------------- get function ---------------------
    if line[0] == '%':
        if inFunction:
            cOutput.write(endOfFunction)
            inFunction = False
            inFunction = False;

        if not inMain:
            cOutput.write('int main() {\n')
            inMain = True;
        # find variables

        variable = re.findall('[a-zA-Z_][0-9a-zA-Z_]+', line[3:-1])
        if len(variable) != 1:
            print('Incorrect variable format.\n ' + lineNumber + ': ' + line)
            exit()
        variable=variable[0]
            
        if not variable in variableList:
            cOutput.write('char '+variable+'=0;\n')
            variableList.append(variable)
        
        cOutput.write('do {'+ line[3:-1] + '=getchar(); } while (' + line[3:-1]+ ' == \'\\n\');\n' ) 
    line = code.readline()

# --------------- complete the process --------------

# close out main()
cOutput.write('}\n');
code.close()
cOutput.close()
os.system('gcc ' + outputFilename + '.c -o ' + outputFilename)
if not retainCCode:
    os.remove(outputFilename+'.c')
if not os.path.isfile(outputFilename):
    print("GCC didn't produce an executable output.  Sorry, didn't work.  If no compiler errors, check to see if GCC is installed.\n")
